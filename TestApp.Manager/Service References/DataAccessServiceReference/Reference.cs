//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestApp.Manager.DataAccessServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DataAccessServiceReference.IDataAccessService")]
    public interface IDataAccessService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataAccessService/AddItem", ReplyAction="http://tempuri.org/IDataAccessService/AddItemResponse")]
        bool AddItem(string itemID, string description, int price);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataAccessService/AddItem", ReplyAction="http://tempuri.org/IDataAccessService/AddItemResponse")]
        System.Threading.Tasks.Task<bool> AddItemAsync(string itemID, string description, int price);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataAccessService/DeleteItem", ReplyAction="http://tempuri.org/IDataAccessService/DeleteItemResponse")]
        bool DeleteItem(string itemID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataAccessService/DeleteItem", ReplyAction="http://tempuri.org/IDataAccessService/DeleteItemResponse")]
        System.Threading.Tasks.Task<bool> DeleteItemAsync(string itemID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataAccessService/GetItem", ReplyAction="http://tempuri.org/IDataAccessService/GetItemResponse")]
        TestApp.Contract.Item_dc GetItem(string itemID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataAccessService/GetItem", ReplyAction="http://tempuri.org/IDataAccessService/GetItemResponse")]
        System.Threading.Tasks.Task<TestApp.Contract.Item_dc> GetItemAsync(string itemID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataAccessService/GetItems", ReplyAction="http://tempuri.org/IDataAccessService/GetItemsResponse")]
        TestApp.Contract.Item_dc[] GetItems();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataAccessService/GetItems", ReplyAction="http://tempuri.org/IDataAccessService/GetItemsResponse")]
        System.Threading.Tasks.Task<TestApp.Contract.Item_dc[]> GetItemsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataAccessService/CreateTransaction", ReplyAction="http://tempuri.org/IDataAccessService/CreateTransactionResponse")]
        bool CreateTransaction(TestApp.Contract.Item_dc[] basket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDataAccessService/CreateTransaction", ReplyAction="http://tempuri.org/IDataAccessService/CreateTransactionResponse")]
        System.Threading.Tasks.Task<bool> CreateTransactionAsync(TestApp.Contract.Item_dc[] basket);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDataAccessServiceChannel : TestApp.Manager.DataAccessServiceReference.IDataAccessService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataAccessServiceClient : System.ServiceModel.ClientBase<TestApp.Manager.DataAccessServiceReference.IDataAccessService>, TestApp.Manager.DataAccessServiceReference.IDataAccessService {
        
        public DataAccessServiceClient() {
        }
        
        public DataAccessServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DataAccessServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataAccessServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DataAccessServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool AddItem(string itemID, string description, int price) {
            return base.Channel.AddItem(itemID, description, price);
        }
        
        public System.Threading.Tasks.Task<bool> AddItemAsync(string itemID, string description, int price) {
            return base.Channel.AddItemAsync(itemID, description, price);
        }
        
        public bool DeleteItem(string itemID) {
            return base.Channel.DeleteItem(itemID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteItemAsync(string itemID) {
            return base.Channel.DeleteItemAsync(itemID);
        }
        
        public TestApp.Contract.Item_dc GetItem(string itemID) {
            return base.Channel.GetItem(itemID);
        }
        
        public System.Threading.Tasks.Task<TestApp.Contract.Item_dc> GetItemAsync(string itemID) {
            return base.Channel.GetItemAsync(itemID);
        }
        
        public TestApp.Contract.Item_dc[] GetItems() {
            return base.Channel.GetItems();
        }
        
        public System.Threading.Tasks.Task<TestApp.Contract.Item_dc[]> GetItemsAsync() {
            return base.Channel.GetItemsAsync();
        }
        
        public bool CreateTransaction(TestApp.Contract.Item_dc[] basket) {
            return base.Channel.CreateTransaction(basket);
        }
        
        public System.Threading.Tasks.Task<bool> CreateTransactionAsync(TestApp.Contract.Item_dc[] basket) {
            return base.Channel.CreateTransactionAsync(basket);
        }
    }
}
